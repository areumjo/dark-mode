{"ast":null,"code":"import _slicedToArray from \"/Users/areumjo/Documents/web-dev/dark-mode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\n\nvar useLocalStorage = function useLocalStorage(key, initialValue) {\n  var _useState = useState(function () {\n    var item = localStorage.getItem(key);\n    console.log('checking useLocalStorage', key, initialValue, item);\n    return item ? JSON.parse(item) : initialValue;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      storedValue = _useState2[0],\n      setStoredValue = _useState2[1];\n\n  var setValue = function setValue(value) {\n    setStoredValue(value);\n    console.log('checking setState', value);\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, setValue];\n};\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/Users/areumjo/Documents/web-dev/dark-mode/src/components/hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","item","localStorage","getItem","console","log","JSON","parse","storedValue","setStoredValue","setValue","value","setItem","stringify"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,YAAN,EAAuB;AAAA,kBACLH,QAAQ,CAAE,YAAM;AAClD,QAAMI,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,GAArB,CAAb;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCN,GAAxC,EAA6CC,YAA7C,EAA2DC,IAA3D;AACA,WAAOA,IAAI,GAAGK,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAH,GAAsBD,YAAjC;AACH,GAJ6C,CADH;AAAA;AAAA,MACpCQ,WADoC;AAAA,MACvBC,cADuB;;AAM3C,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACtBF,IAAAA,cAAc,CAACE,KAAD,CAAd;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCM,KAAjC;AACAT,IAAAA,YAAY,CAACU,OAAb,CAAqBb,GAArB,EAA0BO,IAAI,CAACO,SAAL,CAAeF,KAAf,CAA1B;AACH,GAJD;;AAKA,SAAO,CAACH,WAAD,EAAcE,QAAd,CAAP;AACH,CAZD;;AAcA,eAAeZ,eAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useLocalStorage = (key, initialValue) => {\n    const [storedValue, setStoredValue] = useState( () => {\n        const item = localStorage.getItem(key);\n        console.log('checking useLocalStorage', key, initialValue, item);\n        return item ? JSON.parse(item) : initialValue;\n    });\n    const setValue = value => {\n        setStoredValue(value);\n        console.log('checking setState', value);\n        localStorage.setItem(key, JSON.stringify(value));\n    };\n    return [storedValue, setValue];\n}\n\nexport default useLocalStorage;"]},"metadata":{},"sourceType":"module"}